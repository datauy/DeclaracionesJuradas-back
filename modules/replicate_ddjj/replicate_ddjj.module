<?php

use Drupal\Core\Entity\EntityInterface;
use \Drupal\Core\Database\Database;
use Drupal\taxonomy\Entity\Term;

/**
 * Implements hook_mail_alter().
 */
function replicate_ddjj_mail_alter(&$message) {
  switch ($message['key']) {
    case 'replicate_ddjj':
      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';
      break;
  }
}



function replicate_ddjj_mail($key, &$message, $params) {
  $options = array(
    'langcode' => $message['langcode'],
  );

  switch ($key) {
    case 'replicate_ddjj':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      //$message['subject'] = t('Node created: @title', array('@title' => $params['node_title']), $options);
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['message'];
      break;
  }
}


function send_ddjj_creation_to_moderator($moderator_address,$message){
    $mailManager = \Drupal::service('plugin.manager.mail');
    $module = 'replicate_ddjj';
    $key = 'replicate_ddjj';
    //$to = \Drupal::currentUser()->getEmail();
    $to = $moderator_address;
    $html = "Estimado/a moderador de DDJJ:<br/>";
    $html .= "Se ha añadido una declaración jurada pendiente de aprobación."."<br/>";
    $html .= "Político/a: ".$message["politico"]."<br/>";
    $html .= "Para aprobarla, diríjase a: ".$message["url"]."<br/>";
    $params['message'] = $html;
    $params['node_title'] = "<Título>";
    $params['subject'] = "Tiene una nueva declaración jurada pendiente de aprobación";
    $langcode = \Drupal::currentUser()->getPreferredLangcode();
    $send = true;

    $result = $mailManager->mail($module, $key, $to, $langcode, $params, NULL, $send);
    if ($result['result'] !== true) {
      $message = "Hubo un error al enviar la creación de ddjj a ".$moderator_address;
      drupal_set_message($message, 'error');
      \Drupal::logger('replicate_ddjj')->error($message);
      return;
    }

    $message = "Se ha enviado una creación de ddjj a ".$moderator_address;
    drupal_set_message($message);
    \Drupal::logger('replicate_ddjj')->notice($message);
  }

  function send_ddjj_creation_user($message){
    $mailManager = \Drupal::service('plugin.manager.mail');
    $module = 'replicate_ddjj';
    $key = 'replicate_ddjj';
    $to = \Drupal::currentUser()->getEmail();
    $html = "Estimado/a:<br/>";
    $html .= "Ha creado con éxito una declaración jurada. Cuando un moderador la apruebe será publicada."."<br/>";
    $html .= "Político/a: ".$message["politico"]."<br/>";
    //$html .= "Correo electrónico: ".$message["politico_email"]."<br/>";
    $params['message'] = $html;
    $params['node_title'] = "<titulo>";
    $params['subject'] = "Declaración jurada creada con éxito";
    $langcode = \Drupal::currentUser()->getPreferredLangcode();
    $send = true;

    $result = $mailManager->mail($module, $key, $to, $langcode, $params, NULL, $send);
    if ($result['result'] !== true) {
      $message = "Hubo un error al enviar mensaje de creación de ddjj a ".$to;
      drupal_set_message($message, 'error');
      \Drupal::logger('replicate_ddjj')->error($message);
      return;
    }

    $message = "Se ha enviado un mensaje de creación de ddjj a ".$to;
    drupal_set_message($message);
    \Drupal::logger('replicate_ddjj')->notice($message);
  }


  /**
  * Implements hook_ENTITY_TYPE_presave().
  */
  function replicate_ddjj_node_presave(EntityInterface $entity){
    $bundle = $entity->bundle();
    switch ($bundle) {
      case 'declaracion_jurada':
        $persona = node_load($entity->field_persona[0]->target_id);
        $entity->title = "Declaración jurada " . $persona->title->value . " - " . $entity->field_ano->value;
        break;
      case 'persona':
        $entity->title = $entity->field_apellidos->value.', '.$entity->field_nombres->value;
        break;
    }
  }
/**
* Implements hook_ENTITY_TYPE_postinsert().
*/
function replicate_ddjj_node_postinsert(EntityInterface $entity) {
  $bundle = $entity->bundle();
  if( $bundle == "declaracion_jurada" ){
    $id = $entity->id();
    $node = node_load($id);
    $persona = node_load($entity->field_persona[0]->target_id);
    $message = [
      'politico' => $persona->title->value,
      'url' => "http://form.ddjj.datauy.org/node/".$id."/edit",
    ];
    send_ddjj_creation_to_moderator("ddjj@datauy.org",$message);
    send_ddjj_creation_user($message);
  }
}

/**
* Implements hook_ENTITY_TYPE_postupdate().
*/
function replicate_ddjj_node_postupdate(EntityInterface $entity) {
  $bundle = $entity->bundle();
  if( $bundle == "declaracion_jurada" ){
    if( $entity->isPublished() ){
      replicate_form_in_ddjj($entity,'insert');
    }
  }
}

/**
* Implements hook_ENTITY_TYPE_postdelete().
*/
function replicate_ddjj_node_postdelete(EntityInterface $entity) {
  $id = $entity->id();
  $bundle = $entity->bundle();
  if($bundle=="datos_del_funcionario"){
    replicate_form_in_ddjj($entity,'delete');
  }
}
/**
* Implements hook_ENTITY_TYPE_postdelete().
*/
function replicate_ddjj_inline_entity_form_entity_form_alter(&$entity_form, &$form_state) {
  if ( $entity_form['#entity_type'] == 'node') {
    \Drupal::logger('replicate_ddjj')->notice( "NODE FORM: <pre>".print_r($entity_form['#bundle'], TRUE) );
    $entity_form['title']['#prefix'] = '<div class="identificador" id="edit-title-main-wrapper-inline-'.$entity_form['#bundle'].'">';
    $entity_form['title']['#suffix'] = '</div>';
    $callBack = [
      'callback' => 'replicate_ddjj_form_ajax_inline',
      'wrapper' => 'edit-title-main-wrapper-inline-'.$entity_form['#bundle'], // This element is updated with this AJAX callback.
      'disable-refocus' => TRUE, //Prevent re-focusing on the triggering element.
      'event' => 'change',
      'progress' => [
        'type' => 'throbber',
        'message' => t('Asignando nombre...'),
      ],
    ];
    if ( $entity_form['#bundle'] == 'persona') {
      //No es primera persona
      if (count($entity_form['#parents']) > 3 ) {
        \Drupal::logger('replicate_ddjj')->notice( "PERSONA con PADRES: <pre>".print_r($entity_form['#parents'], TRUE) );
        unset($entity_form['field_actividades_privadas_profe']);//['widget']['0']['value']['#access'] = 0;
        unset($entity_form['field_cargo_publico']);//['widget']['0']['value']['#access'] = 0;
        unset($entity_form['field_estado_civil']);//['widget']['0']['value']['#access'] = 0;
        unset($entity_form['field_facebook']);//['widget']['0']['value']['#access'] = 0;
        unset($entity_form['field_familia']);//['widget']['0']['value']['#access'] = 0;
        unset($entity_form['field_pais']);//['widget']['0']['value']['#access'] = 0;
        unset($entity_form['field_postulaciones_a_cargos']);//['widget']['0']['value']['#access'] = 0;
        unset($entity_form['field_profesion']);//['widget']['0']['value']['#access'] = 0;
        unset($entity_form['field_sitio_oficial']);//['widget']['0']['value']['#access'] = 0;
        unset($entity_form['field_twitter']);//['widget']['0']['value']['#access'] = 0;
        //unset($entity_form['title']);

        $callBack['wrapper'] = 'edit-title-main-wrapper-inline-ajax-'.$entity_form['#bundle'];
        $entity_form['title']['#prefix'] = '<div class="identificador" id="edit-title-main-wrapper-inline-ajax-'.$entity_form['#bundle'].'">';
        $entity_form['field_apellidos']['widget']['0']['value']['#ajax'] = $callBack;
        $entity_form['field_nombres']['widget']['0']['value']['#ajax'] = $callBack;
        //$entity_form['title']['#disabled'] = TRUE;
      }
      else {
        $entity_form['field_apellidos']['widget']['0']['value']['#ajax'] = $callBack;
        $entity_form['field_nombres']['widget']['0']['value']['#ajax'] = $callBack;
      }
    }
    elseif ( $entity_form['#bundle'] == 'bien_inmueble') {
      $entity_form['field_tipo_bien_inmueble']['widget']['#ajax'] = $callBack;
      $entity_form['field_moneda_valor_fiscal']['widget']['#ajax'] = $callBack;
      //$entity_form['field_valor_moneda']['widget']['0']['value']['#ajax'] = $callBack;
    }
    elseif ( $entity_form['#bundle'] == 'bien_mueble') {
      $entity_form['field_tipo_bien_mueble']['widget']['#ajax'] = $callBack;
      $entity_form['field_moneda_valor_fiscal']['widget']['#ajax'] = $callBack;
      //$entity_form['field_valor_moneda']['widget']['0']['value']['#ajax'] = $callBack;
    }
    elseif ( $entity_form['#bundle'] == 'dinero') {
      $entity_form['field_tipo_dinero']['widget']['#ajax'] = $callBack;
      $entity_form['field_moneda_valor_fiscal']['widget']['#ajax'] = $callBack;
      //$entity_form['field_valor_moneda']['widget']['0']['value']['#ajax'] = $callBack;
    }
    elseif ( $entity_form['#bundle'] == 'vinculos') {
      $entity_form['field_vinculo']['widget']['#ajax'] = $callBack;
      //dpm($entity_form['field_persona']);
    }
    elseif ( $entity_form['#bundle'] == 'actividades_privadas_profesional') {
      $entity_form['field_ingreso']['widget'][0]['value']['#ajax'] = $callBack;
    }
    elseif ( $entity_form['#bundle'] == 'cargo_publico') {
      $entity_form['field_ingreso']['widget'][0]['value']['#ajax'] = $callBack;
    }
    elseif ( $entity_form['#bundle'] == 'postulaciones') {
      $entity_form['field_ano']['widget'][0]['value']['#ajax'] = $callBack;
    }
  }
}
/**
* Implements hook_form_alter().
*/
function replicate_ddjj_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if ( $form_id == 'node_persona_form' ) {
    $form['title']['#access'] = FALSE;
  }
}
function replicate_ddjj_get_form_object_name($bundle, $field, $widgets) {
  $eTitle = '';
  foreach ($widgets as &$widget_state) {
    $widget_state += ['entities' => []];
    foreach ($widget_state['entities'] as $delta => $entity_item) {
      if ( !empty($entity_item['entity']) ) {
        if ( $entity_item['entity']->bundle() == $bundle ) {
          if ( $entity_item['entity']->getEntityTypeId() == 'taxonomy_term' ) {
            $eTitle = $entity_item['entity']->get('name')->value;
          }
          else {
            $eTitle = $entity_item['entity']->get('title')->value;
          }
        }
      }
    }
  }
  return $eTitle;
}
function replicate_ddjj_get_value_label($bundle, $field) {

}
//$cargo = Term::load($entity->get('field_cargos_publicos')->target_id);
function replicate_ddjj_form_ajax_inline(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $parents = $form_state->getTriggeringElement()['#array_parents'];
  $title = array();
  $fname = 0;
  if ( count($parents) > 9 ) {
    $fname = $parents[0];
    $field = $parents[4];
    $values = $form_state->getUserInput()[$fname]['form']['inline_entity_form'][$field]['form']['inline_entity_form'];
  }
  else {
    $field = $parents[0];
    $values = $form_state->getUserInput()[$field]['form']['inline_entity_form'];
  }
  \Drupal::logger('replicate_ddjj')->notice( "INLINE ACTIVIDAD AJAX: <pre>".print_r($field, TRUE) );
  $separator = '-';
  if ( $field == 'field_actividades_privadas_profe' ) {
    $title[0] = $values['field_actividad_principal_ambito']['target_id'];
    $title[1] = $values['field_ingreso']['0']['value']['date'];
  }
  elseif ( $field == 'field_bienes_inmuebles' ) {
    $title[0] = $form[$field]['widget']['form']['inline_entity_form']['field_tipo_bien_inmueble']['widget']['#options'][$values['field_tipo_bien_inmueble']];
    $title[1] = $values['field_valor_moneda']['0']['value'];
    $title[2] = $form[$field]['widget']['form']['inline_entity_form']['field_moneda_valor_fiscal']['widget']['#options'][$values['field_moneda_valor_fiscal']];
  }
  elseif ($field == 'field_bienes_muebles') {
    $title[0] = $form[$field]['widget']['form']['inline_entity_form']['field_tipo_bien_mueble']['widget']['#options'][$values['field_tipo_bien_mueble']];
    $title[1] = $values['field_valor_moneda']['0']['value'];
    $title[2] = $form[$field]['widget']['form']['inline_entity_form']['field_moneda_valor_fiscal']['widget']['#options'][$values['field_moneda_valor_fiscal']];
  }
  elseif ( $field == 'field_dinero') {
    $title[0] = $form[$field]['widget']['form']['inline_entity_form']['field_tipo_dinero']['widget']['#options'][$values['field_tipo_dinero']];
    $title[1] = $values['field_valor_moneda']['0']['value'];
    $title[2] = $form[$field]['widget']['form']['inline_entity_form']['field_moneda_valor_fiscal']['widget']['#options'][$values['field_moneda_valor_fiscal']];
  }
  elseif ( $field == 'field_persona' ){
    $title[0] = $values['field_apellidos']['0']['value'];
    $title[1] = $values['field_nombres']['0']['value'];
    $separator = ', ';
  }
  elseif ( $field == 'field_cargo_publico') {
    $title[0] = replicate_ddjj_get_form_object_name('cargos_publicos', $field, $form_state->get('inline_entity_form'));
    $title[1] = $values['field_ingreso']['0']['value']['date'];
  }
  elseif ( $field == 'field_postulaciones_a_cargos') {
    $title[0] = $values['field_ano'];
    $title[1] = replicate_ddjj_get_form_object_name('cargos_publicos', $field, $form_state->get('inline_entity_form'));
  }
  elseif ( $field == 'field_familia') {
    $title[0] = $values['field_vinculo'];
    $title[1] = replicate_ddjj_get_form_object_name('persona', $field, $form_state->get('inline_entity_form'));
  }
  //Results
  if ($fname) {
    $form[$fname]['widget']['form']['inline_entity_form'][$field]['widget']['form']['inline_entity_form']['title']['widget']['0']['value']['#value'] = implode($separator, $title);
    return $form[$fname]['widget']['form']['inline_entity_form'][$field]['widget']['form']['inline_entity_form']['title'];
  }
  else {
    $form[$field]['widget']['form']['inline_entity_form']['title']['widget']['0']['value']['#value'] = implode('-', $title);
    return $form[$field]['widget']['form']['inline_entity_form']['title'];
  }
}
/**
* Implements hook_form_alter().
*/
function replicate_form_in_ddjj(EntityInterface $entity, $operation){
  \Drupal::logger('replicate_ddjj')->notice( "DDJJ REPLICATE FORM TO DATABASE");
  //$tipos_inmuebles = $entity->field_tipo_bien_inmueble->getSetting('allowed_values');
  $fecha_declaracion = $entity->field_ano->value;
  $title = $entity->title->value;
  //foreach ($entity->field_persona as $key => $value) {
  $persona = node_load($entity->field_persona[0]->target_id);
  $apellidos = $persona->field_apellidos->value;
  $nombres = $persona->field_nombres->value;
  //$cedula = $persona->field_cedula_de_identidad->value;
  $cedula = $persona->nid->value;    //Seteamos como documento en ddjj de la persona, el id de nodo de persona en form.ddjj
  //}
  //$departamento = $entity->field_1_departamento->value;
  //$localidad = $entity->field_1_localidad->value;
  $cargo = Term::load($entity->get('field_cargos_publicos')->target_id);
  $cargo_name = $cargo->getName();
  $poder = $cargo->field_poder->value;
  $organismo = Term::load($cargo->get('field_organismo')->target_id);
  $organismo_name = $organismo->getName();
  //$organismo = $entity->field_1_organismo_inciso->value;
  $fecha_cargo = '2020-06-11';

  //$declaracion_por = $entity->field_declaracion_por->value;
  //$conyugue_nombre_completo = $entity->field_conyugue_apellidos_nombres->value;
  $url = $entity->field_url_declaracion->value;
  $log = "\n\nPersona:\n";
  $persona = array (
    'documento' => $cedula,
    'nombre' => $nombres,
    'apellido' => $apellidos
  );
  $log .= print_r($persona, TRUE);
  $personaId = getPersonId($persona);
  $cargo = array (
  'persona_id' => $personaId,
  'cargo' => $cargo_name,
  'fecha' => $fecha_cargo,
  'jurisdiccion' => $organismo_name,
  'poder' => $poder
  );
  $log .= "\n\nCargo:\n";
  $log .= print_r($cargo, TRUE);
  \Drupal::logger('replicate_ddjj')->notice( "DDJJ REPLICATE FORM: $log" );
  $obs = '<Observaciones>';//$entity->field_observaciones->value;
  try {
    $cargo_id = getCargoId($cargo);
    $cargo['cargo_id'] = $cargo_id;
    $jurisdiccion_id = getJurisdiccionId($organismo_name,$poder);
    $cargo['jurisdiccion_id'] = $jurisdiccion_id;
    $persona_cargo_id = getPersonaCargoId($cargo);
    $cargo['persona_cargo_id'] = $persona_cargo_id;
    $declaracion_id = getDeclaracionId($fecha_declaracion,$persona,$cargo,$obs,$url);
    $contenido_declaracion_id = getContenidoDeclaracionId($fecha_declaracion,$persona,$cargo,$declaracion_id);
  }
  catch (Exception $e) {
    // Generic exception handling if something else gets thrown.
    \Drupal::logger('replicate_ddjj')->error($e->getMessage());
    return 0;
  }

  //Borro todos los bienes en caso de que haya alguno porque igual se crean de nuevo (para no tener que actualizar uno por uno)
  delete_all_declaration_bienes($declaracion_id);

  if($operation=='delete'){
    deleteDeclaracion($declaracion_id);
  }else{
    \Drupal::logger('replicate_ddjj')->notice( "LLEGAMOS A BIENES" );
    //Inmuebles
    $tipo_bien_nombre = 'Bienes inmuebles';
    $inmuebles = $entity->field_bienes_inmuebles->referencedEntities();
    foreach ( $inmuebles as $inmueble ) {
      $nombre_bien_nombre = $inmueble->field_tipo_bien_inmueble->value;
      /*
      field_localidad_distrito
      field_mejoras_importe
      field_mejoras_moneda
      field_superficie
      field_superficie_unidad
      field_tipo_bien_inmueble
      field_titulares_extra
      */
      createBien($declaracion_id, $fecha_cargo, $personaId, $tipo_bien_nombre, $nombre_bien_nombre, $inmueble);
    }
    //Muebles
    $tipo_bien_nombre = 'Bienes muebles';
    $muebles = $entity->field_bienes_muebles->referencedEntities();
    foreach ( $muebles as $mueble ) {
      $nombre_bien_nombre = $mueble->field_tipo_bien_mueble->value;
      /* Datos del vehículo, etc. */
      createBien($declaracion_id, $fecha_cargo, $personaId, $tipo_bien_nombre, $nombre_bien_nombre, $mueble);
    }
    //Dinero
    /*
16|No especifica

*/
    $dinero = $entity->field_dinero->referencedEntities();
    $nombre_bien_nombres = \Drupal\field\Entity\FieldStorageConfig::loadByName('node', 'field_tipo_dinero')->get('settings')['allowed_values'];
    foreach ( $dinero as $bien ) {
      $nombre_bien_key = $bien->field_tipo_dinero->value;
      switch ($nombre_bien_key) {
        case 2:
        case 11:
          $tipo_bien_nombre = 'Ingresos por cargo';
        break;
        case 12:
        case 13:
        case 14:
        case 15:
        case 18:
        case 19:
        case 20:
        case 21:
          $tipo_bien_nombre = 'Ahorros';
        break;
        case 22:
        case 9:
          $tipo_bien_nombre = 'Deudas';
        break;
        case 23:
          $tipo_bien_nombre = 'Sociedades';
        break;
        case 6:
        case 24:
          $tipo_bien_nombre = 'Acreencias';
        break;
        case 25:
        case 26:
          $tipo_bien_nombre = 'Títulos y Fondos';
        break;
        default:
          $tipo_bien_nombre = 'Otros ingresos';
        break;
      }
      $label = $nombre_bien_nombres[$nombre_bien_key];
      // Datos del vehículo, etc.
      createBien($declaracion_id, $fecha_cargo, $personaId, $tipo_bien_nombre, $label, $bien);
    }
  }
}

//Chequea si existe la persona. Si no existe, la crea. Devuelve id de persona.
function getPersonId($persona){
  $id = "no encontrado";
  if($persona['documento']){
    $result = Database::getConnection('replicate_ddjj', 'default')->query("SELECT id  FROM personas where documento = '".$persona['documento']."'");
    foreach ($result as $record) {
      // Do something with each $record
      $id = $record->id;
    }
    if($id=="no encontrado"){
      $insert = Database::getConnection('replicate_ddjj', 'default')->query("insert into personas (documento,nombre,apellido,created_at,updated_at) values ('".$persona['documento']."','".$persona['nombre']."','".$persona['apellido']."',NOW(),NOW())");
      $result = Database::getConnection('replicate_ddjj', 'default')->query("SELECT id  FROM personas where documento = '".$persona['documento']."'");
      foreach ($result as $record) {
        // Do something with each $record
        $id = $record->id;
      }
    }
  }else{
    $result = Database::getConnection('replicate_ddjj', 'default')->query("SELECT id  FROM personas where apellido = '".$persona['apellido']."' and nombre = '".$persona['nombre']."'");
    foreach ($result as $record) {
      // Do something with each $record
      $id = $record->id;
    }
    if($id=="no encontrado"){
      $insert = Database::getConnection('replicate_ddjj', 'default')->query("insert into personas (nombre,apellido,created_at,updated_at) values ('".$persona['nombre']."','".$persona['apellido']."',NOW(),NOW())");
      $result = Database::getConnection('replicate_ddjj', 'default')->query("SELECT id  FROM personas where apellido = '".$persona['apellido']."' and nombre = '".$persona['nombre']."'");
      foreach ($result as $record) {
        // Do something with each $record
        $id = $record->id;
      }
    }
  }

  return $id;
}

//Chequea si existe el cargo. Si no existe, lo crea. Devuelve id de cargo.
function getCargoId($cargo){
  $result = Database::getConnection('replicate_ddjj', 'default')->query("SELECT id FROM cargos where cargo = '".$cargo['cargo']."'
  and jurisdiccion = '".$cargo['jurisdiccion']."' and poder_id = ".$cargo['poder']);
  $id = "no encontrado";
  foreach ($result as $record) {
    // Do something with each $record
    $id = $record->id;
  }
  if($id=="no encontrado"){
    $insert = Database::getConnection('replicate_ddjj', 'default')->query("insert into cargos (poder_id,cargo,jurisdiccion,created_at,updated_at)
    values (".$cargo['poder'].",'".$cargo['cargo']."','".$cargo['jurisdiccion']."','".$cargo['fecha']."','".$cargo['fecha']."')");
    $result = Database::getConnection('replicate_ddjj', 'default')->query("SELECT id FROM cargos where cargo = '".$cargo['cargo']."'
    and jurisdiccion = '".$cargo['jurisdiccion']."' and poder_id = ".$cargo['poder']);
    foreach ($result as $record) {
      // Do something with each $record
      $id = $record->id;
    }
  }
  return $id;
}

//Chequea si existe la jurisdiccion. Si no existe, la crea. Devuelve id de jurisdiccion.
function getJurisdiccionId($organismo,$poder_id){
  $result = Database::getConnection('replicate_ddjj', 'default')->query("SELECT id FROM jurisdiccions where nombre = '".$organismo."' and poder_id = ".$poder_id);
  $id = "no encontrado";
  foreach ($result as $record) {
    // Do something with each $record
    $id = $record->id;
  }
  if($id=="no encontrado"){
    $insert = Database::getConnection('replicate_ddjj', 'default')->query("insert into jurisdiccions (poder_id,nombre,created_at,updated_at)
    values (".$poder_id.",'".$organismo."',NOW(),NOW())");
    $result = Database::getConnection('replicate_ddjj', 'default')->query("SELECT id FROM jurisdiccions where nombre = '".$organismo."'");

    foreach ($result as $record) {
      // Do something with each $record
      $id = $record->id;
    }
  }
  return $id;
}

//Chequea si existe el cargo para la persona. Si no existe, lo crea. Devuelve id de persona_cargo.
function getPersonaCargoId($cargo){
  $result = Database::getConnection('replicate_ddjj', 'default')->query("SELECT id FROM persona_cargos where persona_id = ".$cargo['persona_id']."
  and cargo_id = '".$cargo['cargo_id']."'
  and jurisdiccion_id = '".$cargo['jurisdiccion_id']."' and ingreso = '".$cargo['fecha']."'");
  $id = "no encontrado";
  foreach ($result as $record) {
    // Do something with each $record
    $id = $record->id;
  }
  if($id=="no encontrado"){
    $insert = Database::getConnection('replicate_ddjj', 'default')->query("insert into persona_cargos (persona_id,cargo_id,jurisdiccion_id,ingreso,created_at,updated_at)
    values ('".$cargo['persona_id']."','".$cargo['cargo_id']."','".$cargo['jurisdiccion_id']."','".$cargo['fecha']."','".$cargo['fecha']."','".$cargo['fecha']."')");
    $result = Database::getConnection('replicate_ddjj', 'default')->query("SELECT id FROM persona_cargos where persona_id = ".$cargo['persona_id']."
    and cargo_id = '".$cargo['cargo_id']."'
    and jurisdiccion_id = '".$cargo['jurisdiccion_id']."' and ingreso = '".$cargo['fecha']."'");
    foreach ($result as $record) {
      // Do something with each $record
      $id = $record->id;
    }
  }
  return $id;
}


//Chequea si existe la declaración jurada para la persona. Si no existe, la crea. Devuelve id de ddjj.
function getDeclaracionId($fecha_declaracion,$persona,$cargo,$obs,$url){
  //$fecha = explode("-",$fecha_declaracion);
  $ano = $fecha_declaracion;//$fecha[0];
  $flag_search = strtolower(str_replace(" ","-",$persona['apellido']) . "-" . str_replace(" ","-",$persona['nombre']) . "-" . $ano . "-anual");
  $result = Database::getConnection('replicate_ddjj', 'default')->query("SELECT id FROM ddjjs where persona_id = ".$cargo['persona_id']."
  and persona_cargo_id = '".$cargo['persona_cargo_id']."'
  and ano = ".$ano." and poder_id = ".$cargo['poder']);
  $id = "no encontrado";
  foreach ($result as $record) {
    // Do something with each $record
    $id = $record->id;
  }
  if($id=="no encontrado"){
    $nombre_completo = $persona['nombre'] . " " . $persona['apellido'];
    $insert = Database::getConnection('replicate_ddjj', 'default')->query("insert into ddjjs (poder_id,persona_id,persona_cargo_id,funcionario,ano,created_at,updated_at,status,flag_presenta,tipo_ddjj_id,flag_search,obs,url)
    values (".$cargo['poder'].",'".$cargo['persona_id']."','".$cargo['persona_cargo_id']."','".$nombre_completo."',".$ano.",NOW(),NOW(),1,1,3,'".$flag_search."', '".$obs."','".$url."')");
    $result = Database::getConnection('replicate_ddjj', 'default')->query("SELECT id FROM ddjjs where persona_id = ".$cargo['persona_id']."
    and persona_cargo_id = '".$cargo['persona_cargo_id']."'
    and ano = ".$ano." and poder_id = ".$cargo['poder']);
    foreach ($result as $record) {
      // Do something with each $record
      $id = $record->id;
    }
  }
  return $id;
}


//Chequea si existe la fila en la tabla contenido_ddjjs. Si no existe, la crea. Devuelve id de contenido_ddjjs.
function getContenidoDeclaracionId($fecha_declaracion,$persona,$cargo,$declaracion_id){
  //$fecha = explode("-",$fecha_declaracion);
  $ano = $fecha_declaracion;//$fecha[0];
  $result = Database::getConnection('replicate_ddjj', 'default')->query("SELECT id FROM contenido_ddjjs where persona_id = ".$cargo['persona_id']."
  and cargo_id = '".$cargo['cargo_id']."'
  and ddjj_ano = ".$ano." and poder_id = ".$cargo['poder']." and ddjj_id = ".$declaracion_id);
  $id = "no encontrado";
  foreach ($result as $record) {
    // Do something with each $record
    $id = $record->id;
  }
  if($id=="no encontrado"){
    $nombre_completo = $persona['nombre'] . " " . $persona['apellido'];
    $contenido = implode(" ",$persona)." ".implode(" ",$cargo);
    $insert = Database::getConnection('replicate_ddjj', 'default')->query("insert into contenido_ddjjs (poder_id,persona_id,cargo_id,persona_str,ddjj_ano,created_at,updated_at,cargo_str,contenido,ddjj_id)
    values (".$cargo['poder'].",'".$cargo['persona_id']."','".$cargo['cargo_id']."','".$nombre_completo."',".$ano.",NOW(),NOW(),
    '".$cargo['cargo']."','".$contenido."',".$declaracion_id.")");
    $result = Database::getConnection('replicate_ddjj', 'default')->query("SELECT id FROM contenido_ddjjs where persona_id = ".$cargo['persona_id']."
    and cargo_id = '".$cargo['cargo_id']."'
    and ddjj_ano = ".$ano." and poder_id = ".$cargo['poder']." and ddjj_id = ".$declaracion_id);
    foreach ($result as $record) {
      // Do something with each $record
      $id = $record->id;
    }
  }
  return $id;
}

function delete_all_declaration_bienes($declaracion_id){
  $delete = Database::getConnection('replicate_ddjj', 'default')->query("DELETE from biens where ddjj_id = " . $declaracion_id);
}

function deleteDeclaracion($declaracion_id){
  $delete = Database::getConnection('replicate_ddjj', 'default')->query("DELETE from contenido_ddjjs where ddjj_id = " . $declaracion_id);
  $delete = Database::getConnection('replicate_ddjj', 'default')->query("DELETE from ddjjs where id = " . $declaracion_id);
}

/*
Bienes inmuebles
Bienes muebles
Ingresos cargo
Ingresos otros
Deudas
Dinero ahorros
Sociedades
Acreencias
Títulos y fondos y deudas
*/
function getTipoBienId($nombre){
  $result = Database::getConnection('replicate_ddjj', 'default')->query("SELECT id  FROM tipo_biens where nombre = '".$nombre."'");
  $id = "no encontrado";
  foreach ($result as $record) {
    // Do something with each $record
    $id = $record->id;
  }
  if($id=="no encontrado"){
    $insert = Database::getConnection('replicate_ddjj', 'default')->query("insert into tipo_biens (nombre,created_at,updated_at) values ('".$nombre."',NOW(),NOW())");
    $result = Database::getConnection('replicate_ddjj', 'default')->query("SELECT id  FROM tipo_biens where nombre = '".$nombre."'");
    foreach ($result as $record) {
      // Do something with each $record
      $id = $record->id;
    }
  }
  return $id;
}

function getNombreBienId($tipo_bien_id,$nombre){
  $result = Database::getConnection('replicate_ddjj', 'default')->query("SELECT id  FROM nombre_biens where nombre = '".$nombre."' and tipo_bien_id = ".$tipo_bien_id);
  $id = "no encontrado";
  foreach ($result as $record) {
    // Do something with each $record
    $id = $record->id;
  }
  if($id=="no encontrado"){
    $insert = Database::getConnection('replicate_ddjj', 'default')->query("insert into nombre_biens (tipo_bien_id,nombre,created_at,updated_at) values (".$tipo_bien_id.",'".$nombre."',NOW(),NOW())");
    $result = Database::getConnection('replicate_ddjj', 'default')->query("SELECT id  FROM nombre_biens where nombre = '".$nombre."' and tipo_bien_id = ".$tipo_bien_id);
    foreach ($result as $record) {
      // Do something with each $record
      $id = $record->id;
    }
  }
  return $id;
}

function createBien($declaracion_id, $fecha, $personaId, $tipo_bien_nombre, $nombre_bien_nombre, $bien_obj){
  $tipo_bien_id = getTipoBienId($tipo_bien_nombre);
  $nombre_bien_id = getNombreBienId($tipo_bien_id,$nombre_bien_nombre);

  $bien = array (
    'ddjj_id' => $declaracion_id,
    'persona_id' => $personaId,
    'tipo_bien_id' => $tipo_bien_id,
    'tipo_bien_s' => "'".$tipo_bien_nombre."'",
    'nombre_bien_id' => $nombre_bien_id,
    'nombre_bien_s' => "'".$nombre_bien_nombre."'",
    'm_valor_fiscal_id' => $bien_obj->field_moneda_valor_fiscal->value,
    'porcentaje' => empty($bien_obj->field_porcentaje->value) ? 100 : $bien_obj->field_porcentaje->value,
    'valor_fiscal' => $bien_obj->field_valor_moneda->value,
    'descripcion' => "'".$bien_obj->body->value."'",
    'titular_dominio' => "'Declarante'",
    'vinculo' => "'Titular'",
    'created_at' => "NOW()",
    'updated_at' => "NOW()",
    'origen' => "'".$bien_obj->field_origen->value."'",
    'destino' => "'".$bien_obj->field_destino->value."'",
    // TODO: ARREGLAR
    'fecha_desde' => empty($bien_obj->field_ingreso->value) ? "'".$fecha."'" : "'".$bien_obj->field_ingreso->value."'",
    'fecha_hasta' => empty($bien_obj->field_egreso->value) ? "'".$fecha."'" : "'".$bien_obj->field_egreso->value."'",
    'pais' => "'".$bien_obj->field_pais_mundial->value."'",
  );
  \Drupal::logger('replicate_ddjj')->notice( "BIENES A CREAR: ".print_r($bien, TRUE) );
  try {
    $columnNamesArray = array_keys($bien);
    $columnNamesString = implode(",",$columnNamesArray);
    $valuesString = implode(",",$bien);
    $query = "INSERT into biens (" . $columnNamesString . ") values (" . $valuesString . ")";
    $result = Database::getConnection('replicate_ddjj', 'default')->query($query);
    return 1;
  }
  catch (Exception $e) {
    // Generic exception handling if something else gets thrown.
    \Drupal::logger('replicate_ddjj')->error($e->getMessage());
    return 0;
  }
}



function replicate_legislator_without_ddjj_in_ddjj(EntityInterface $entity, $cargoStr, $operation){
  $bundle = $entity->bundle();
  if($bundle=="persona"){
    $apellidos = $entity->title->value;
    $nombres = $entity->field_nombres->value;
    $email = $entity->field_correo_electronico->value;
    $cedula = $entity->id();
    $poder = 1;
    $organismo = "Palacio legislativo";
    $fecha_cargo = "2016-01-01";
    $persona = array (
      'documento' => $cedula,
      'nombre' => $nombres,
      'apellido' => $apellidos,
      'email' => $email
    );
    $personaId = getPersonIdWithMail($persona);
    $cargo = array (
      'persona_id' => $personaId,
      'cargo' => $cargoStr,
      'fecha' => $fecha_cargo,
      'jurisdiccion' => $organismo,
      'poder' => $poder
    );
    $cargo_id = getCargoId($cargo);
    $cargo['cargo_id'] = $cargo_id;
    $jurisdiccion_id = getJurisdiccionId($organismo,$poder);
    $cargo['jurisdiccion_id'] = $jurisdiccion_id;
    $persona_cargo_id = getPersonaCargoId($cargo);
    $cargo['persona_cargo_id'] = $persona_cargo_id;
    if($operation=='insert'){
    }
  }
}

//Chequea si existe la persona. Si no existe, la crea. Devuelve id de persona.
function getPersonIdWithMail($persona){
  $id = "no encontrado";
  if($persona['documento']){
    $result = Database::getConnection('replicate_ddjj', 'default')->query("SELECT id  FROM personas where documento = '".$persona['documento']."'");
    foreach ($result as $record) {
      // Do something with each $record
      $id = $record->id;
    }
    if($id=="no encontrado"){
      $insert = Database::getConnection('replicate_ddjj', 'default')->query("insert into personas (documento,nombre,apellido,email,created_at,updated_at) values ('".$persona['documento']."','".$persona['nombre']."','".$persona['apellido']."','".$persona['email']."',NOW(),NOW())");
      $result = Database::getConnection('replicate_ddjj', 'default')->query("SELECT id  FROM personas where documento = '".$persona['documento']."'");
      foreach ($result as $record) {
        // Do something with each $record
        $id = $record->id;
      }
    }
  }else{
    $result = Database::getConnection('replicate_ddjj', 'default')->query("SELECT id  FROM personas where apellido = '".$persona['apellido']."' and nombre = '".$persona['nombre']."'");
    foreach ($result as $record) {
      // Do something with each $record
      $id = $record->id;
    }
    if($id=="no encontrado"){
      $insert = Database::getConnection('replicate_ddjj', 'default')->query("insert into personas (nombre,apellido,email,created_at,updated_at) values ('".$persona['nombre']."','".$persona['apellido']."','".$persona['email']."',NOW(),NOW())");
      $result = Database::getConnection('replicate_ddjj', 'default')->query("SELECT id  FROM personas where apellido = '".$persona['apellido']."' and nombre = '".$persona['nombre']."'");
      foreach ($result as $record) {
        // Do something with each $record
        $id = $record->id;
      }
    }
  }

  return $id;
}
