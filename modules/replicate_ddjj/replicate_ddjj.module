<?php

use Drupal\Core\Entity\EntityInterface;
use \Drupal\Core\Database\Database;

/**
 * Implements hook_mail_alter().
 */
function replicate_ddjj_mail_alter(&$message) {
  switch ($message['key']) {
    case 'replicate_ddjj':
      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';
      break;
  }
}



function replicate_ddjj_mail($key, &$message, $params) {
  $options = array(
    'langcode' => $message['langcode'],
  );

  switch ($key) {
    case 'replicate_ddjj':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      //$message['subject'] = t('Node created: @title', array('@title' => $params['node_title']), $options);
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['message'];
      break;
  }
}


function send_ddjj_creation_to_moderator($moderator_address,$message){
    $mailManager = \Drupal::service('plugin.manager.mail');
    $module = 'replicate_ddjj';
    $key = 'replicate_ddjj';
    //$to = \Drupal::currentUser()->getEmail();
    $to = $moderator_address;
    $html = "Estimado/a moderador de DDJJ:<br/>";
    $html .= "Se ha añadido una declaración jurada pendiente de aprobación."."<br/>";
    $html .= "Político/a: ".$message["politico"]."<br/>";
    $html .= "Para aprobarla, diríjase a: ".$message["url"]."<br/>";
    $params['message'] = $html;
    $params['node_title'] = $entity->title->value;
    $params['subject'] = "Tiene una nueva declaración jurada pendiente de aprobación";
    $langcode = \Drupal::currentUser()->getPreferredLangcode();
    $send = true;

    $result = $mailManager->mail($module, $key, $to, $langcode, $params, NULL, $send);
    if ($result['result'] !== true) {
      $message = "Hubo un error al enviar la creación de ddjj a ".$moderator_address;
      drupal_set_message($message, 'error');
      \Drupal::logger('replicate_ddjj')->error($message);
      return;
    }

    $message = "Se ha enviado una creación de ddjj a ".$moderator_address;
    drupal_set_message($message);
    \Drupal::logger('replicate_ddjj')->notice($message);
  }

  function send_ddjj_creation_user($message){
    $mailManager = \Drupal::service('plugin.manager.mail');
    $module = 'replicate_ddjj';
    $key = 'replicate_ddjj';
    $to = \Drupal::currentUser()->getEmail();
    $html = "Estimado/a:<br/>";
    $html .= "Ha creado con éxito una declaración jurada. Cuando un moderador la apruebe será publicada."."<br/>";
    $html .= "Político/a: ".$message["politico"]."<br/>";
    //$html .= "Correo electrónico: ".$message["politico_email"]."<br/>";
    $params['message'] = $html;
    $params['node_title'] = "<titulo>";
    $params['subject'] = "Declaración jurada creada con éxito";
    $langcode = \Drupal::currentUser()->getPreferredLangcode();
    $send = true;

    $result = $mailManager->mail($module, $key, $to, $langcode, $params, NULL, $send);
    if ($result['result'] !== true) {
      $message = "Hubo un error al enviar mensaje de creación de ddjj a ".$to;
      drupal_set_message($message, 'error');
      \Drupal::logger('replicate_ddjj')->error($message);
      return;
    }

    $message = "Se ha enviado un mensaje de creación de ddjj a ".$to;
    drupal_set_message($message);
    \Drupal::logger('replicate_ddjj')->notice($message);
  }


  /**
  * Implements hook_ENTITY_TYPE_presave().
  */
  function replicate_ddjj_node_presave(EntityInterface $entity){
    $bundle = $entity->bundle();
    switch ($bundle) {
      case 'declaracion_jurada':
        $persona = node_load($entity->field_persona[0]->target_id);
        $entity->title = "Declaración jurada " . $persona->title->value . " - " . $entity->field_ano->value;
        break;
      case 'persona':
        $entity->title = $entity->field_apellidos->value.', '.$entity->field_nombres->value;
        break;
      case 'bien_inmueble':
        $entity->title = "--Bien inmueble--";
      break;
      case 'bien_mueble':
        $entity->title = "--Bien mueble--";
      break;
      case 'cargo_publico':
        $entity->title = "--Cargo publico--";
      break;
      case 'titulares_extra':
        $entity->title = "--Titular extra--";
      break;
      case 'dinero':
        $entity->title = "--Dinero--";
      break;
      case 'vinculos':
        $persona = node_load($entity->field_persona[0]->target_id);
        \Drupal::logger('replicate_ddjj')->notice("Presave Vinculo: <pre>".$persona->title->value);
        $entity->title = $persona->title->value."-".$entity->field_vinculo->value;
      break;
      default:
        // code...
        break;
    }
  }
/**
* Implements hook_ENTITY_TYPE_postinsert().
*/
function replicate_ddjj_node_postinsert(EntityInterface $entity) {
  $bundle = $entity->bundle();
  if( $bundle == "declaracion_jurada" ){
    $id = $entity->id();
    $node = node_load($id);
    $persona = node_load($entity->field_persona[0]->target_id);
    $message = [
      'politico' => $persona->title->value,
      'url' => "http://form.ddjj.datauy.org/node/".$id."/edit",
    ];
    send_ddjj_creation_to_moderator("ddjj@datauy.org",$message);
    send_ddjj_creation_user($message);
  }
}

/**
* Implements hook_ENTITY_TYPE_postupdate().
*/
function replicate_ddjj_node_postupdate(EntityInterface $entity) {
  \Drupal::logger('replicate_ddjj')->notice("POST UPDATE: <pre>".$entity->bundle());
  $bundle = $entity->bundle();
  if( $bundle == "declaracion_jurada" ){
    \Drupal::logger('replicate_ddjj')->notice("POST UPDATE ES DECLApre>".$entity->bundle());
    if( $entity->isPublished() ){
      \Drupal::logger('replicate_ddjj')->notice("POST UPDATE PÚBLICApre>".$entity->bundle());
      replicate_form_in_ddjj($entity,'insert');
    }
  }
}

/**
* Implements hook_ENTITY_TYPE_postdelete().
*/
function replicate_ddjj_node_postdelete(EntityInterface $entity) {
  $id = $entity->id();
  $bundle = $entity->bundle();
  if($bundle=="datos_del_funcionario"){
    replicate_form_in_ddjj($entity,'delete');
  }
}
/**
* Implements hook_ENTITY_TYPE_postdelete().
*/
function replicate_ddjj_inline_entity_form_entity_form_alter(&$entity_form, &$form_state) {
  if ( $entity_form['#entity_type'] == 'node') {
    if ( $entity_form['#bundle'] == 'persona') {
      \Drupal::logger('replicate_ddjj')->notice( "PERSONA FORM: <pre>".print_r($entity_form['#parents'], TRUE) );
      //No es primera persona
      if (count($entity_form['#parents']) > 3 ) {
        \Drupal::logger('replicate_ddjj')->notice( "PERSONA con PADRES: <pre>".print_r($entity_form['#parents'], TRUE) );
        $entity_form['field_actividades_privadas_profe']['widget']['0']['value']['#access'] = 0;
        $entity_form['field_cargo_publico']['widget']['0']['value']['#access'] = 0;
        $entity_form['field_estado_civil']['widget']['0']['value']['#access'] = 0;
        $entity_form['field_facebook']['widget']['0']['value']['#access'] = 0;
        $entity_form['field_familia']['widget']['0']['value']['#access'] = 0;
        $entity_form['field_pais']['widget']['0']['value']['#access'] = 0;
        $entity_form['field_postulaciones_a_cargos']['widget']['0']['value']['#access'] = 0;
        $entity_form['field_profesion']['widget']['0']['value']['#access'] = 0;
        $entity_form['field_sitio_oficial']['widget']['0']['value']['#access'] = 0;
        $entity_form['field_twitter']['widget']['0']['value']['#access'] = 0;
        $callBack = [
          'callback' => 'replicate_ddjj_form_ajax_inline_ajax', // don't forget :: when calling a class method.
          'disable-refocus' => TRUE, //Prevent re-focusing on the triggering element.
          'event' => 'change',
          'wrapper' => 'edit-title-main-wrapper-inline-'.$entity_form['#bundle'], // This element is updated with this AJAX callback.
          'progress' => [
            'type' => 'throbber',
            'message' => t('Asignando nombre...'),
          ],
        ];
        $entity_form['field_apellidos']['widget']['0']['value']['#ajax'] = $callBack;
        $entity_form['field_nombres']['widget']['0']['value']['#ajax'] = $callBack;
        $entity_form['title']['#disabled'] = TRUE;
        $entity_form['title']['#prefix'] = '<div id="edit-title-main-wrapper-inline'.$entity_form['#bundle'].'">';
        $entity_form['title']['#suffix'] = '</div>';
      }
      else {
        replicate_ddjj_form_alter($entity_form, $form_state, 'node_persona_form_ajax');
      }
    }
    elseif ( $entity_form['#bundle'] == 'cargo_publico') {
      \Drupal::logger('replicate_ddjj')->notice( "CARGO INLINE: <pre>" );
      $entity_form['actions']['submit']['#submit'][] = 'replicate_ddjj_assign_title';
      $submit_handlers = $form_state->getSubmitHandlers();
      $submit_handlers[] = 'replicate_ddjj_assign_title';
      $form_state->setSubmitHandlers($submit_handlers);
    }
  }
}
function replicate_ddjj_assign_title($form, \Drupal\Core\Form\FormStateInterface $form_state) {
  \Drupal::logger('replicate_ddjj')->notice( "CUSTOM SUBMIT CARGO INLINE: <pre>" );
  $node = $form_state->getFormObject()->getEntity();
  $node->setTitle('Custom Title - ' . $node->id());
  $node->save();
}
/**
* Implements hook_form_alter().
*/
function replicate_ddjj_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if ( $form_id == 'node_persona_form' || $form_id == 'node_persona_form_ajax' ) {
    $callBack = [
      'callback' => 'replicate_ddjj_form_ajax', // don't forget :: when calling a class method.
      'disable-refocus' => TRUE, //Prevent re-focusing on the triggering element.
      'event' => 'change',
      'wrapper' => 'edit-title-main-wrapper', // This element is updated with this AJAX callback.
      'progress' => [
        'type' => 'throbber',
        'message' => t('Asignando nombre...'),
      ],
    ];
    if ( $form_id == 'node_persona_form_ajax' ) {
      $callBack['callback'] = 'replicate_ddjj_form_ajax_inline';
      //$callBack['wrapper'] = 'edit-field-persona-form-inline-entity-form-title-wrapper';
    }
    $form['field_apellidos']['widget']['0']['value']['#ajax'] = $callBack;
    $form['field_nombres']['widget']['0']['value']['#ajax'] = $callBack;
    $form['title']['#disabled'] = TRUE;
    $form['title']['#prefix'] = '<div id="edit-title-main-wrapper">';
    $form['title']['#suffix'] = '</div>';
  }
}
/**
* Implements hook_form_alter().
*/
function replicate_ddjj_form_ajax(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $form['title']['widget']['0']['value']['#value'] = "";
  $apellidos = $form_state->getValue('field_apellidos')['0']['value'];
  $nombres = $form_state->getValue('field_nombres')['0']['value'];
  if ( !empty($apellidos) ) {
    $form['title']['widget']['0']['value']['#value'] = $apellidos;
  }
  if ( !empty($nombres) ) {
    $form['title']['widget']['0']['value']['#value'] .= ", ".$nombres;
  }
  return $form['title'];
}
/**
* Implements hook_form_alter().
*/
function replicate_ddjj_form_ajax_inline(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $form['field_persona']['widget']['form']['inline_entity_form']['title']['widget']['0']['value']['#value'] = "";
  $values = $form_state->getUserInput()['field_persona']['form']['inline_entity_form'];
  $apellidos = $values['field_apellidos']['0']['value'];
  $nombres = $values['field_nombres']['0']['value'];
  if ( !empty($apellidos) ) {
    $form['field_persona']['widget']['form']['inline_entity_form']['title']['widget']['0']['value']['#value'] = $apellidos;
  }
  if ( !empty($nombres) ) {
    $form['field_persona']['widget']['form']['inline_entity_form']['title']['widget']['0']['value']['#value'] .= ", ".$nombres;
  }
  return $form['field_persona']['widget']['form']['inline_entity_form']['title'];
}
/**
* Implements hook_form_alter().
*/
function replicate_ddjj_form_ajax_inline_ajax(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $form['field_persona']['widget']['form']['inline_entity_form']['title']['widget']['0']['value']['#value'] = "";
  $values = $form_state->getUserInput()['field_persona']['form']['inline_entity_form'];
  $apellidos = $values['field_apellidos']['0']['value'];
  $nombres = $values['field_nombres']['0']['value'];
  if ( !empty($apellidos) ) {
    $form['field_persona']['widget']['form']['inline_entity_form']['title']['widget']['0']['value']['#value'] = $apellidos;
  }
  if ( !empty($nombres) ) {
    $form['field_persona']['widget']['form']['inline_entity_form']['title']['widget']['0']['value']['#value'] .= ", ".$nombres;
  }
  return $form['field_persona']['widget']['form']['inline_entity_form']['title'];
}
/**
* Implements hook_form_alter().
*/
function replicate_form_in_ddjj(EntityInterface $entity, $operation){
  \Drupal::logger('replicate_ddjj')->notice( "DDJJ REPLICATE: <pre>".print_r($entity->field_persona, TRUE) );
  //$tipos_inmuebles = $entity->field_tipo_bien_inmueble->getSetting('allowed_values');
  $fecha_declaracion = $entity->field_ano->value;
  $title = $entity->title->value;
  //foreach ($entity->field_persona as $key => $value) {
  $persona = node_load($entity->field_persona[0]->target_id);
  $apellidos = $persona->field_apellidos->value;
  $nombres = $persona->field_nombres->value;
  //$cedula = $persona->field_cedula_de_identidad->value;
  $cedula = $persona->nid->value;    //Seteamos como documento en ddjj de la persona, el id de nodo de persona en form.ddjj
  //}
  //$departamento = $entity->field_1_departamento->value;
  //$localidad = $entity->field_1_localidad->value;

  $cargo_id = $entity->field_cargos_publicos[0]->target_id;
  //$poder = $entity->field_poder->value;
  //$organismo = $entity->field_1_organismo_inciso->value;
  //$fecha_cargo = $entity->field_1_fecha_cargo->value;

  //$declaracion_por = $entity->field_declaracion_por->value;
  //$conyugue_nombre_completo = $entity->field_conyugue_apellidos_nombres->value;
  $url = $entity->field_url_declaracion->value;
  print "\n\nPersona:\n";
  $persona = array (
    'documento' => $cedula,
    'nombre' => $nombres,
    'apellido' => $apellidos
  );
  print_r($persona);
  //$personaId = getPersonId($persona);
  $cargo = array (
  //'persona_id' => $personaId,
  'cargo' => $cargo,
  'fecha' => $fecha_cargo,
  'jurisdiccion' => $organismo,
  'poder' => $poder
  );
  print "\n\nCargo:\n";
  print_r($cargo);
  return 0;
  $cargo_id = getCargoId($cargo);
  $cargo['cargo_id'] = $cargo_id;
  $jurisdiccion_id = getJurisdiccionId($organismo,$poder);
  $cargo['jurisdiccion_id'] = $jurisdiccion_id;
  $persona_cargo_id = getPersonaCargoId($cargo);
  $cargo['persona_cargo_id'] = $persona_cargo_id;
  $obs = $entity->field_observaciones->value;
  $declaracion_id = getDeclaracionId($fecha_declaracion,$persona,$cargo,$obs,$url);
  $contenido_declaracion_id = getContenidoDeclaracionId($fecha_declaracion,$persona,$cargo,$declaracion_id);

  //Borro todos los bienes en caso de que haya alguno porque igual se crean de nuevo (para no tener que actualizar uno por uno)
  delete_all_declaration_bienes($declaracion_id);

  if($operation=='delete'){
    deleteDeclaracion($declaracion_id);
  }else{
    //Inmuebles
    $tipo_bien_nombre = 'Bienes inmuebles';
    $tipo_bien_id = getTipoBienId($tipo_bien_nombre);
    $nombre_bien_nombre = 'lote';
    $nombre_bien_id = getNombreBienId($tipo_bien_id,$nombre_bien_nombre);
    foreach ($entity->field_bienes_inmuebles as $key => $value) {
      $inmueble = node_load($entity->field_inmuebles[$key]->target_id);
      $inmueble_padron = $inmueble->title->value;
      $inmueble_propiedad = $inmueble->field__de_propiedad->value;
      $inmueble_ubicacion = $inmueble->field_especie_y_ubicacion->value;
      $inmueble_propio = $inmueble->field_propio_o_ganancial->value;
      $inmueble_valor = $inmueble->field_valor_actual_estimado_en_p->value;
      $bien = array (
        'persona_id' => $personaId,
        'tipo_bien_id' => $tipo_bien_id,
        'tipo_bien_s' => "'".$tipo_bien_nombre."'",
        'nombre_bien_id' => $nombre_bien_id,
        'nombre_bien_s' => "'".$nombre_bien_nombre."'",
        'ddjj_id' => $declaracion_id,
        'm_valor_fiscal_id' => '0',
        'porcentaje' => $inmueble_propiedad,
        'valor_fiscal' => $inmueble_valor,
        'descripcion' => "'Especie y ubicación: ".$inmueble_ubicacion." Padrón: ".$inmueble_padron."'",
        'titular_dominio' => "'Declarante'",
        'vinculo' => "'Titular'",
        'created_at' => "NOW()",
        'updated_at' => "NOW()",
        'origen' => "'".$inmueble_propio."'"
      );
      createBien($bien);
    }

    //Vehículos
    $tipo_bien_nombre = 'Bienes muebles';
    $tipo_bien_id = getTipoBienId($tipo_bien_nombre);
    $nombre_bien_nombre = 'Automotor';
    $nombre_bien_id = getNombreBienId($tipo_bien_id,$nombre_bien_nombre);
    foreach ($entity->field_vehiculos as $key => $value) {
      $vehiculo = node_load($entity->field_vehiculos[$key]->target_id);
      $vehiculo_marca = $vehiculo->title->value;
      $vehiculo_propiedad = $vehiculo->field__de_propiedad->value;
      $vehiculo_ano = $vehiculo->field_ano->value;
      $vehiculo_matricula = $vehiculo->field_matricula->value;
      $vehiculo_padron = $vehiculo->field_padron->value;
      $vehiculo_propio = $vehiculo->field_propio_o_ganancial->value;
      $vehiculo_tipo = $vehiculo->field_tipo->value;
      $vehiculo_valor = $vehiculo->field_valor_actual_estimado_en_p->value;
      $bien = array (
        'persona_id' => $personaId,
        'tipo_bien_id' => $tipo_bien_id,
        'tipo_bien_s' => "'".$tipo_bien_nombre."'",
        'nombre_bien_id' => $nombre_bien_id,
        'nombre_bien_s' => "'".$nombre_bien_nombre."'",
        'ddjj_id' => $declaracion_id,
        'm_valor_fiscal_id' => '0',
        'porcentaje' => $vehiculo_propiedad,
        'valor_fiscal' => $vehiculo_valor,
        'descripcion' => "'Marca: ".$vehiculo_marca." Padrón: ".$vehiculo_padron." Tipo: ".$vehiculo_tipo."'",
        'titular_dominio' => "'Declarante'",
        'vinculo' => "'Titular'",
        'created_at' => "NOW()",
        'updated_at' => "NOW()",
        'origen' => "'".$vehiculo_propio."'"
        );
        createBien($bien);
      }
    //Sueldos líquidos funcionario
    $tipo_bien_nombre = 'Ingresos cargo';
    $tipo_bien_id = getTipoBienId($tipo_bien_nombre);
    $nombre_bien_nombre = 'Sueldo líquido';
    $nombre_bien_id = getNombreBienId($tipo_bien_id,$nombre_bien_nombre);
    foreach ($entity->field_sueldos_liquidos_funcionar as $key => $value) {
      $sueldo = node_load($entity->field_sueldos_liquidos_funcionar[$key]->target_id);
      $sueldo_empleador = $sueldo->title->value;
      $sueldo_monto = $sueldo->field_sueldo_monto->value;
      $bien = array (
      'persona_id' => $personaId,
      'tipo_bien_id' => $tipo_bien_id,
      'tipo_bien_s' => "'".$tipo_bien_nombre."'",
      'nombre_bien_id' => $nombre_bien_id,
      'nombre_bien_s' => "'".$nombre_bien_nombre."'",
      'ddjj_id' => $declaracion_id,
      'm_valor_fiscal_id' => "0",
      'valor_fiscal' => $sueldo_monto,
      'descripcion' => "'".$sueldo_empleador."'",
      'titular_dominio' => "'Declarante'",
      'vinculo' => "'Titular'",
      'created_at' => "NOW()",
      'updated_at' => "NOW()"
      );
      createBien($bien);
    }

    //Sueldos líquidos conyugue
    $tipo_bien_nombre = 'Ingresos cargo';
    $tipo_bien_id = getTipoBienId($tipo_bien_nombre);
    $nombre_bien_nombre = 'Sueldo líquido (cónyugue)';
    $nombre_bien_id = getNombreBienId($tipo_bien_id,$nombre_bien_nombre);
    foreach ($entity->field_sueldos_liquidos_conyugue as $key => $value) {
      $sueldo = node_load($entity->field_sueldos_liquidos_conyugue[$key]->target_id);
      $sueldo_empleador = $sueldo->title->value;
      $sueldo_monto = $sueldo->field_sueldo_monto->value;
      $bien = array (
      'persona_id' => $personaId,
      'tipo_bien_id' => $tipo_bien_id,
      'tipo_bien_s' => "'".$tipo_bien_nombre."'",
      'nombre_bien_id' => $nombre_bien_id,
      'nombre_bien_s' => "'".$nombre_bien_nombre."'",
      'ddjj_id' => $declaracion_id,
      'm_valor_fiscal_id' => "0",
      'valor_fiscal' => $sueldo_monto,
      'descripcion' => "'".$sueldo_empleador."'",
      'titular_dominio' => "'Cónyugue'",
      'vinculo' => "'Cónyugue'",
      'created_at' => "NOW()",
      'updated_at' => "NOW()"
      );
      createBien($bien);
    }


    //Rentas conyugue
    $tipo_bien_nombre = 'Ingresos otros';
    $tipo_bien_id = getTipoBienId($tipo_bien_nombre);
    $nombre_bien_nombre = 'Renta (cónyugue)';
    $nombre_bien_id = getNombreBienId($tipo_bien_id,$nombre_bien_nombre);
    foreach ($entity->field_rentas_conyugue as $key => $value) {
      $renta = node_load($entity->field_rentas_conyugue[$key]->target_id);
      $renta_descripcion = $renta->title->value;
      $renta_monto = $renta->field_monto->value;
      $bien = array (
        'persona_id' => $personaId,
        'tipo_bien_id' => $tipo_bien_id,
        'tipo_bien_s' => "'".$tipo_bien_nombre."'",
        'nombre_bien_id' => $nombre_bien_id,
        'nombre_bien_s' => "'".$nombre_bien_nombre."'",
        'ddjj_id' => $declaracion_id,
        'm_valor_fiscal_id' => "0",
        'valor_fiscal' => $renta_monto,
        'descripcion' => "'".$renta_descripcion."'",
        'titular_dominio' => "'Cónyugue'",
        'vinculo' => "'Cónyugue'",
        'created_at' => "NOW()",
        'updated_at' => "NOW()"
      );
      createBien($bien);
    }

    //Depósitos
    $tipo_bien_nombre = 'Dinero ahorros';
    $tipo_bien_id = getTipoBienId($tipo_bien_nombre);
    $nombre_bien_nombre = 'Depósito';
    $nombre_bien_id = getNombreBienId($tipo_bien_id,$nombre_bien_nombre);
    foreach ($entity->field_depositos as $key => $value) {
      $deposito = node_load($entity->field_depositos[$key]->target_id);
      $deposito_banco = $deposito->title->value;
      $deposito_moneda = $deposito->field_moneda->value;
      $deposito_monto = $deposito->field_monto->value;
      $deposito_cuenta = $deposito->field_no_de_cuenta->value;
      $deposito_propio = $deposito->field_propio_o_ganancial->value;
      $deposito_valor = $deposito->field_valor_en_pesos_->value;
      $bien = array (
        'persona_id' => $personaId,
        'tipo_bien_id' => $tipo_bien_id,
        'tipo_bien_s' => "'".$tipo_bien_nombre."'",
        'nombre_bien_id' => $nombre_bien_id,
        'nombre_bien_s' => "'".$nombre_bien_nombre."'",
        'ddjj_id' => $declaracion_id,
        'm_valor_fiscal_id' => $deposito_moneda,
        'valor_fiscal' => $deposito_valor,
        'descripcion' => "'Banco: ".$deposito_banco."'",
        'titular_dominio' => "'Declarante'",
        'vinculo' => "'Titular'",
        'created_at' => "NOW()",
        'updated_at' => "NOW()",
        'origen' => "'".$deposito_propio."'"
      );
      /*\Drupal::logger('hook_post_action_test')
    ->info("Se crea el deposito {$deposito_banco} " . __FUNCTION__);*/
      createBien($bien);
    }


    //Deudas hipotecarias
    $tipo_bien_nombre = 'Deudas';
    $tipo_bien_id = getTipoBienId($tipo_bien_nombre);
    $nombre_bien_nombre = 'Deudas hipotecarias o prendarias';
    $nombre_bien_id = getNombreBienId($tipo_bien_id,$nombre_bien_nombre);
    foreach ($entity->field_deudas_hipotecarias_o_pren as $key => $value) {
      $deuda = node_load($entity->field_deudas_hipotecarias_o_pren[$key]->target_id);
      $deuda_acreedor = $deuda->title->value;
      $deuda_bien_gravado = $deuda->field_bien_gravado->value;
      $deuda_importe_moneda_pactada = $deuda->field_importe_moneda_pac->value;
      $deuda_saldo_pesos = $deuda->field_saldo_en_pesos_->value;
      $bien = array (
        'persona_id' => $personaId,
        'tipo_bien_id' => $tipo_bien_id,
        'tipo_bien_s' => "'".$tipo_bien_nombre."'",
        'nombre_bien_id' => $nombre_bien_id,
        'nombre_bien_s' => "'".$nombre_bien_nombre."'",
        'ddjj_id' => $declaracion_id,
        'm_valor_fiscal_id' => '0',
        'valor_fiscal' => $deuda_saldo_pesos,
        'descripcion' => "'Acreedor: ".$deuda_acreedor."'",
        'titular_dominio' => "'Declarante'",
        'vinculo' => "'Titular'",
        'created_at' => "NOW()",
        'updated_at' => "NOW()"
      );
      createBien($bien);
    }
  }
}

//Chequea si existe la persona. Si no existe, la crea. Devuelve id de persona.
function getPersonId($persona){
  $id = "no encontrado";
  if($persona['documento']){
    $result = Database::getConnection('replicate_ddjj', 'default')->query("SELECT id  FROM personas where documento = '".$persona['documento']."'");
    foreach ($result as $record) {
      // Do something with each $record
      $id = $record->id;
    }
    if($id=="no encontrado"){
      $insert = Database::getConnection('replicate_ddjj', 'default')->query("insert into personas (documento,nombre,apellido,created_at,updated_at) values ('".$persona['documento']."','".$persona['nombre']."','".$persona['apellido']."',NOW(),NOW())");
      $result = Database::getConnection('replicate_ddjj', 'default')->query("SELECT id  FROM personas where documento = '".$persona['documento']."'");
      foreach ($result as $record) {
        // Do something with each $record
        $id = $record->id;
      }
    }
  }else{
    $result = Database::getConnection('replicate_ddjj', 'default')->query("SELECT id  FROM personas where apellido = '".$persona['apellido']."' and nombre = '".$persona['nombre']."'");
    foreach ($result as $record) {
      // Do something with each $record
      $id = $record->id;
    }
    if($id=="no encontrado"){
      $insert = Database::getConnection('replicate_ddjj', 'default')->query("insert into personas (nombre,apellido,created_at,updated_at) values ('".$persona['nombre']."','".$persona['apellido']."',NOW(),NOW())");
      $result = Database::getConnection('replicate_ddjj', 'default')->query("SELECT id  FROM personas where apellido = '".$persona['apellido']."' and nombre = '".$persona['nombre']."'");
      foreach ($result as $record) {
        // Do something with each $record
        $id = $record->id;
      }
    }
  }

  return $id;
}

//Chequea si existe el cargo. Si no existe, lo crea. Devuelve id de cargo.
function getCargoId($cargo){
  $result = Database::getConnection('replicate_ddjj', 'default')->query("SELECT id FROM cargos where cargo = '".$cargo['cargo']."'
  and jurisdiccion = '".$cargo['jurisdiccion']."' and poder_id = ".$cargo['poder']);
  $id = "no encontrado";
  foreach ($result as $record) {
    // Do something with each $record
    $id = $record->id;
  }
  if($id=="no encontrado"){
    $insert = Database::getConnection('replicate_ddjj', 'default')->query("insert into cargos (poder_id,cargo,jurisdiccion,created_at,updated_at)
    values (".$cargo['poder'].",'".$cargo['cargo']."','".$cargo['jurisdiccion']."','".$cargo['fecha']."','".$cargo['fecha']."')");
    $result = Database::getConnection('replicate_ddjj', 'default')->query("SELECT id FROM cargos where cargo = '".$cargo['cargo']."'
    and jurisdiccion = '".$cargo['jurisdiccion']."' and poder_id = ".$cargo['poder']);
    foreach ($result as $record) {
      // Do something with each $record
      $id = $record->id;
    }
  }
  return $id;
}

//Chequea si existe la jurisdiccion. Si no existe, la crea. Devuelve id de jurisdiccion.
function getJurisdiccionId($organismo,$poder_id){
  $result = Database::getConnection('replicate_ddjj', 'default')->query("SELECT id FROM jurisdiccions where nombre = '".$organismo."' and poder_id = ".$poder_id);
  $id = "no encontrado";
  foreach ($result as $record) {
    // Do something with each $record
    $id = $record->id;
  }
  if($id=="no encontrado"){
    $insert = Database::getConnection('replicate_ddjj', 'default')->query("insert into jurisdiccions (poder_id,nombre,created_at,updated_at)
    values (".$poder_id.",'".$organismo."',NOW(),NOW())");
    $result = Database::getConnection('replicate_ddjj', 'default')->query("SELECT id FROM jurisdiccions where nombre = '".$organismo."'");

    foreach ($result as $record) {
      // Do something with each $record
      $id = $record->id;
    }
  }
  return $id;
}

//Chequea si existe el cargo para la persona. Si no existe, lo crea. Devuelve id de persona_cargo.
function getPersonaCargoId($cargo){
  $result = Database::getConnection('replicate_ddjj', 'default')->query("SELECT id FROM persona_cargos where persona_id = ".$cargo['persona_id']."
  and cargo_id = '".$cargo['cargo_id']."'
  and jurisdiccion_id = '".$cargo['jurisdiccion_id']."' and ingreso = '".$cargo['fecha']."'");
  $id = "no encontrado";
  foreach ($result as $record) {
    // Do something with each $record
    $id = $record->id;
  }
  if($id=="no encontrado"){
    $insert = Database::getConnection('replicate_ddjj', 'default')->query("insert into persona_cargos (persona_id,cargo_id,jurisdiccion_id,ingreso,created_at,updated_at)
    values ('".$cargo['persona_id']."','".$cargo['cargo_id']."','".$cargo['jurisdiccion_id']."','".$cargo['fecha']."','".$cargo['fecha']."','".$cargo['fecha']."')");
    $result = Database::getConnection('replicate_ddjj', 'default')->query("SELECT id FROM persona_cargos where persona_id = ".$cargo['persona_id']."
    and cargo_id = '".$cargo['cargo_id']."'
    and jurisdiccion_id = '".$cargo['jurisdiccion_id']."' and ingreso = '".$cargo['fecha']."'");
    foreach ($result as $record) {
      // Do something with each $record
      $id = $record->id;
    }
  }
  return $id;
}


//Chequea si existe la declaración jurada para la persona. Si no existe, la crea. Devuelve id de ddjj.
function getDeclaracionId($fecha_declaracion,$persona,$cargo,$obs,$url){
  //$fecha = explode("-",$fecha_declaracion);
  $ano = $fecha_declaracion;//$fecha[0];
  $flag_search = strtolower(str_replace(" ","-",$persona['apellido']) . "-" . str_replace(" ","-",$persona['nombre']) . "-" . $ano . "-anual");
  $result = Database::getConnection('replicate_ddjj', 'default')->query("SELECT id FROM ddjjs where persona_id = ".$cargo['persona_id']."
  and persona_cargo_id = '".$cargo['persona_cargo_id']."'
  and ano = ".$ano." and poder_id = ".$cargo['poder']);
  $id = "no encontrado";
  foreach ($result as $record) {
    // Do something with each $record
    $id = $record->id;
  }
  if($id=="no encontrado"){
    $nombre_completo = $persona['nombre'] . " " . $persona['apellido'];
    $insert = Database::getConnection('replicate_ddjj', 'default')->query("insert into ddjjs (poder_id,persona_id,persona_cargo_id,funcionario,ano,created_at,updated_at,status,flag_presenta,tipo_ddjj_id,flag_search,obs,url)
    values (".$cargo['poder'].",'".$cargo['persona_id']."','".$cargo['persona_cargo_id']."','".$nombre_completo."',".$ano.",NOW(),NOW(),1,1,3,'".$flag_search."', '".$obs."','".$url."')");
    $result = Database::getConnection('replicate_ddjj', 'default')->query("SELECT id FROM ddjjs where persona_id = ".$cargo['persona_id']."
    and persona_cargo_id = '".$cargo['persona_cargo_id']."'
    and ano = ".$ano." and poder_id = ".$cargo['poder']);
    foreach ($result as $record) {
      // Do something with each $record
      $id = $record->id;
    }
  }
  return $id;
}


//Chequea si existe la fila en la tabla contenido_ddjjs. Si no existe, la crea. Devuelve id de contenido_ddjjs.
function getContenidoDeclaracionId($fecha_declaracion,$persona,$cargo,$declaracion_id){
  //$fecha = explode("-",$fecha_declaracion);
  $ano = $fecha_declaracion;//$fecha[0];
  $result = Database::getConnection('replicate_ddjj', 'default')->query("SELECT id FROM contenido_ddjjs where persona_id = ".$cargo['persona_id']."
  and cargo_id = '".$cargo['cargo_id']."'
  and ddjj_ano = ".$ano." and poder_id = ".$cargo['poder']." and ddjj_id = ".$declaracion_id);
  $id = "no encontrado";
  foreach ($result as $record) {
    // Do something with each $record
    $id = $record->id;
  }
  if($id=="no encontrado"){
    $nombre_completo = $persona['nombre'] . " " . $persona['apellido'];
    $contenido = implode(" ",$persona)." ".implode(" ",$cargo);
    $insert = Database::getConnection('replicate_ddjj', 'default')->query("insert into contenido_ddjjs (poder_id,persona_id,cargo_id,persona_str,ddjj_ano,created_at,updated_at,cargo_str,contenido,ddjj_id)
    values (".$cargo['poder'].",'".$cargo['persona_id']."','".$cargo['cargo_id']."','".$nombre_completo."',".$ano.",NOW(),NOW(),
    '".$cargo['cargo']."','".$contenido."',".$declaracion_id.")");
    $result = Database::getConnection('replicate_ddjj', 'default')->query("SELECT id FROM contenido_ddjjs where persona_id = ".$cargo['persona_id']."
    and cargo_id = '".$cargo['cargo_id']."'
    and ddjj_ano = ".$ano." and poder_id = ".$cargo['poder']." and ddjj_id = ".$declaracion_id);
    foreach ($result as $record) {
      // Do something with each $record
      $id = $record->id;
    }
  }
  return $id;
}

function delete_all_declaration_bienes($declaracion_id){
  $delete = Database::getConnection('replicate_ddjj', 'default')->query("DELETE from biens where ddjj_id = " . $declaracion_id);
}

function deleteDeclaracion($declaracion_id){
  $delete = Database::getConnection('replicate_ddjj', 'default')->query("DELETE from contenido_ddjjs where ddjj_id = " . $declaracion_id);
  $delete = Database::getConnection('replicate_ddjj', 'default')->query("DELETE from ddjjs where id = " . $declaracion_id);
}

/*
Bienes inmuebles
Bienes muebles
Ingresos cargo
Ingresos otros
Deudas
Dinero ahorros
Sociedades
Acreencias
Títulos y fondos y deudas
*/
function getTipoBienId($nombre){
  $result = Database::getConnection('replicate_ddjj', 'default')->query("SELECT id  FROM tipo_biens where nombre = '".$nombre."'");
  $id = "no encontrado";
  foreach ($result as $record) {
    // Do something with each $record
    $id = $record->id;
  }
  if($id=="no encontrado"){
    $insert = Database::getConnection('replicate_ddjj', 'default')->query("insert into tipo_biens (nombre,created_at,updated_at) values ('".$nombre."',NOW(),NOW())");
    $result = Database::getConnection('replicate_ddjj', 'default')->query("SELECT id  FROM tipo_biens where nombre = '".$nombre."'");
    foreach ($result as $record) {
      // Do something with each $record
      $id = $record->id;
    }
  }
  return $id;
}

function getNombreBienId($tipo_bien_id,$nombre){
  $result = Database::getConnection('replicate_ddjj', 'default')->query("SELECT id  FROM nombre_biens where nombre = '".$nombre."' and tipo_bien_id = ".$tipo_bien_id);
  $id = "no encontrado";
  foreach ($result as $record) {
    // Do something with each $record
    $id = $record->id;
  }
  if($id=="no encontrado"){
    $insert = Database::getConnection('replicate_ddjj', 'default')->query("insert into nombre_biens (tipo_bien_id,nombre,created_at,updated_at) values (".$tipo_bien_id.",'".$nombre."',NOW(),NOW())");
    $result = Database::getConnection('replicate_ddjj', 'default')->query("SELECT id  FROM nombre_biens where nombre = '".$nombre."' and tipo_bien_id = ".$tipo_bien_id);
    foreach ($result as $record) {
      // Do something with each $record
      $id = $record->id;
    }
  }
  return $id;
}

function createBien($bien){
  $columnNamesArray = array_keys($bien);
  $columnNamesString = implode(",",$columnNamesArray);
  $valuesString = implode(",",$bien);
  $query = "INSERT into biens (" . $columnNamesString . ") values (" . $valuesString . ")";
  $result = Database::getConnection('replicate_ddjj', 'default')->query($query);
}



function replicate_legislator_without_ddjj_in_ddjj(EntityInterface $entity, $cargoStr, $operation){
  $bundle = $entity->bundle();
  if($bundle=="persona"){
    $apellidos = $entity->title->value;
    $nombres = $entity->field_nombres->value;
    $email = $entity->field_correo_electronico->value;
    $cedula = $entity->id();
    $poder = 1;
    $organismo = "Palacio legislativo";
    $fecha_cargo = "2016-01-01";
    $persona = array (
      'documento' => $cedula,
      'nombre' => $nombres,
      'apellido' => $apellidos,
      'email' => $email
    );
    $personaId = getPersonIdWithMail($persona);
    $cargo = array (
      'persona_id' => $personaId,
      'cargo' => $cargoStr,
      'fecha' => $fecha_cargo,
      'jurisdiccion' => $organismo,
      'poder' => $poder
    );
    $cargo_id = getCargoId($cargo);
    $cargo['cargo_id'] = $cargo_id;
    $jurisdiccion_id = getJurisdiccionId($organismo,$poder);
    $cargo['jurisdiccion_id'] = $jurisdiccion_id;
    $persona_cargo_id = getPersonaCargoId($cargo);
    $cargo['persona_cargo_id'] = $persona_cargo_id;
    if($operation=='insert'){
    }
  }
}

//Chequea si existe la persona. Si no existe, la crea. Devuelve id de persona.
function getPersonIdWithMail($persona){
  $id = "no encontrado";
  if($persona['documento']){
    $result = Database::getConnection('replicate_ddjj', 'default')->query("SELECT id  FROM personas where documento = '".$persona['documento']."'");
    foreach ($result as $record) {
      // Do something with each $record
      $id = $record->id;
    }
    if($id=="no encontrado"){
      $insert = Database::getConnection('replicate_ddjj', 'default')->query("insert into personas (documento,nombre,apellido,email,created_at,updated_at) values ('".$persona['documento']."','".$persona['nombre']."','".$persona['apellido']."','".$persona['email']."',NOW(),NOW())");
      $result = Database::getConnection('replicate_ddjj', 'default')->query("SELECT id  FROM personas where documento = '".$persona['documento']."'");
      foreach ($result as $record) {
        // Do something with each $record
        $id = $record->id;
      }
    }
  }else{
    $result = Database::getConnection('replicate_ddjj', 'default')->query("SELECT id  FROM personas where apellido = '".$persona['apellido']."' and nombre = '".$persona['nombre']."'");
    foreach ($result as $record) {
      // Do something with each $record
      $id = $record->id;
    }
    if($id=="no encontrado"){
      $insert = Database::getConnection('replicate_ddjj', 'default')->query("insert into personas (nombre,apellido,email,created_at,updated_at) values ('".$persona['nombre']."','".$persona['apellido']."','".$persona['email']."',NOW(),NOW())");
      $result = Database::getConnection('replicate_ddjj', 'default')->query("SELECT id  FROM personas where apellido = '".$persona['apellido']."' and nombre = '".$persona['nombre']."'");
      foreach ($result as $record) {
        // Do something with each $record
        $id = $record->id;
      }
    }
  }

  return $id;
}
